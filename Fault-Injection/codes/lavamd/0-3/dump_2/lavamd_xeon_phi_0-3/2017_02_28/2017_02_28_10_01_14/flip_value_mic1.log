2017-02-28 10:00:40:Starting flip_value script
2017-02-28 10:00:40:Initialization strings:
2017-02-28 10:00:40:(1) target extended-remote | ssh -T mic1 gdbserver --multi -
2017-02-28 10:00:40:(2) set sysroot /opt/mpss/3.7/sysroots/k1om-mpss-linux/
2017-02-28 10:00:40:(3) set sysroot /opt/mpss/3.7/sysroots/k1om-mpss-linux/
2017-02-28 10:00:40:(4) file /micNfs/gdb-fault-injection/injector/bin/lavamd/lavamd_check
2017-02-28 10:00:40:(5) set remote exec-file /micNfs/gdb-fault-injection/injector/bin/lavamd/lavamd_check
2017-02-28 10:00:40:(6) set args 228 15 /micNfs/gdb-fault-injection/injector/bin/lavamd/input_distance_228_15 /micNfs/gdb-fault-injection/injector/bin/lavamd/input_charges_228_15 /micNfs/gdb-fault-injection/injector/bin/lavamd/output_gold_228_15 1
2017-02-28 10:00:40:initSignal:0
2017-02-28 10:00:40:endSignal:3
2017-02-28 10:00:40:seqSignal:30
2017-02-28 10:00:42:Backtrace BEGIN:
2017-02-28 10:00:42:#0  0x00007ffff7930c40 in ?? ()
#1  0x00007ffff788c60a in ?? ()
#2  0x00000000000004e0 in ?? ()
#3  0x00007ffff6ebff40 in ?? ()
#4  0x000000000000009d in ?? ()
#5  0x00007ffff78d7001 in ?? ()
#6  0x0000000000000000 in ?? ()

2017-02-28 10:00:42:50	    char * input_charges;
51	    char * output_gold;
52	
53	    int i, j, k, l, m, n;
54	
55	    par_str par_cpu;
56	    dim_str dim_cpu;
57	    box_str* box_cpu;
58	    FOUR_VECTOR* rv_cpu;
59	    fp* qv_cpu;

2017-02-28 10:00:42:Backtrace END
2017-02-28 10:00:44:Backtrace BEGIN:
2017-02-28 10:00:44:#0  0x00007ffff7930c40 in ?? ()
#1  0x00007ffff788c60a in ?? ()
#2  0x00000000000004e0 in ?? ()
#3  0x00007ffff6ebff40 in ?? ()
#4  0x000000000000009d in ?? ()
#5  0x00007ffff78d7001 in ?? ()
#6  0x0000000000000000 in ?? ()

2017-02-28 10:00:44:60	    FOUR_VECTOR* fv_cpu;
61	    FOUR_VECTOR* fv_cpu_GOLD;
62	    int nh;
63	
64	    dim_cpu.cores_arg = 1;
65	    dim_cpu.boxes1d_arg = 1;
66	
67	    if(argc == 7) {
68	        dim_cpu.cores_arg  = atoi(argv[1]);
69	        dim_cpu.boxes1d_arg = atoi(argv[2]);

2017-02-28 10:00:44:Backtrace END
2017-02-28 10:00:47:Backtrace BEGIN:
2017-02-28 10:00:47:#0  0x00007ffff7930c40 in ?? ()
#1  0x00007ffff788c60a in ?? ()
#2  0x00000000000004e0 in ?? ()
#3  0x00007ffff6ebff40 in ?? ()
#4  0x000000000000009d in ?? ()
#5  0x00007ffff78d7001 in ?? ()
#6  0x0000000000000000 in ?? ()

2017-02-28 10:00:47:70	        input_distance = argv[3];
71	        input_charges = argv[4];
72	        output_gold = argv[5];
73	        iteractions = atoi(argv[6]);
74	    } else {
75	        usage();
76	        exit(1);
77	    }
78	
79	

2017-02-28 10:00:47:Backtrace END
2017-02-28 10:00:49:Backtrace BEGIN:
2017-02-28 10:00:49:#0  0x00007ffff7930c40 in ?? ()
#1  0x00007ffff788c60a in ?? ()
#2  0x00000000000004e0 in ?? ()
#3  0x00007ffff6ebff40 in ?? ()
#4  0x000000000000009d in ?? ()
#5  0x00007ffff78d7001 in ?? ()
#6  0x0000000000000000 in ?? ()

2017-02-28 10:00:49:80	    printf("Configuration used: cores = %d, boxes1d = %d\n", dim_cpu.cores_arg, dim_cpu.boxes1d_arg);
81	
82	    par_cpu.alpha = 0.5;
83	
84	    dim_cpu.number_boxes = dim_cpu.boxes1d_arg * dim_cpu.boxes1d_arg * dim_cpu.boxes1d_arg;
85	
86	    dim_cpu.space_elem = dim_cpu.number_boxes * NUMBER_PAR_PER_BOX;
87	    dim_cpu.space_mem = dim_cpu.space_elem * sizeof(FOUR_VECTOR);
88	    dim_cpu.space_mem2 = dim_cpu.space_elem * sizeof(fp);
89	

2017-02-28 10:00:49:Backtrace END
2017-02-28 10:00:52:Backtrace BEGIN:
2017-02-28 10:00:52:#0  0x00007ffff7930c40 in ?? ()
#1  0x00007ffff788c60a in ?? ()
#2  0x00000000000004e0 in ?? ()
#3  0x00007ffff6ebff40 in ?? ()
#4  0x000000000000009d in ?? ()
#5  0x00007ffff78d7001 in ?? ()
#6  0x0000000000000000 in ?? ()

2017-02-28 10:00:52:90	    dim_cpu.box_mem = dim_cpu.number_boxes * sizeof(box_str);
91	
92	    box_cpu = (box_str*)malloc(dim_cpu.box_mem);
93	
94	    nh = 0;
95	
96	    for(i=0; i<dim_cpu.boxes1d_arg; i++) {
97	
98	        for(j=0; j<dim_cpu.boxes1d_arg; j++) {
99	

2017-02-28 10:00:52:Backtrace END
2017-02-28 10:00:54:Backtrace BEGIN:
2017-02-28 10:00:54:#0  0x00007ffff7930c40 in ?? ()
#1  0x00007ffff788c60a in ?? ()
#2  0x00000000000004e0 in ?? ()
#3  0x00007ffff6ebff40 in ?? ()
#4  0x000000000000009d in ?? ()
#5  0x00007ffff78d7001 in ?? ()
#6  0x0000000000000000 in ?? ()

2017-02-28 10:00:54:100	            for(k=0; k<dim_cpu.boxes1d_arg; k++) {
101	
102	                box_cpu[nh].x = k;
103	                box_cpu[nh].y = j;
104	                box_cpu[nh].z = i;
105	                box_cpu[nh].number = nh;
106	                box_cpu[nh].offset = nh * NUMBER_PAR_PER_BOX;
107	
108	                box_cpu[nh].nn = 0;
109	

2017-02-28 10:00:54:Backtrace END
2017-02-28 10:00:57:Backtrace BEGIN:
2017-02-28 10:00:57:#0  0x00007ffff7930c40 in ?? ()
#1  0x00007ffff788c60a in ?? ()
#2  0x00000000000004e0 in ?? ()
#3  0x00007ffff6ebff40 in ?? ()
#4  0x000000000000009d in ?? ()
#5  0x00007ffff78d7001 in ?? ()
#6  0x0000000000000000 in ?? ()

2017-02-28 10:00:57:110	                for(l=-1; l<2; l++) {
111	
112	                    for(m=-1; m<2; m++) {
113	
114	                        for(n=-1; n<2; n++) {
115	
116	                            if((((i+l)>=0 && (j+m)>=0 && (k+n)>=0)==true && ((i+l)<dim_cpu.boxes1d_arg && (j+m)<dim_cpu.boxes1d_arg && (k+n)<dim_cpu.boxes1d_arg)==true) && (l==0 && m==0 && n==0)==false) {
117	
118	                                box_cpu[nh].nei[box_cpu[nh].nn].x = (k+n);
119	                                box_cpu[nh].nei[box_cpu[nh].nn].y = (j+m);

2017-02-28 10:00:57:Backtrace END
2017-02-28 10:01:07:event type: exit
2017-02-28 10:01:07:exit code: 0
