2017-02-28 14:35:01:Starting flip_value script
2017-02-28 14:35:01:Initialization strings:
2017-02-28 14:35:01:(1) target extended-remote | ssh -T mic0 gdbserver --multi -
2017-02-28 14:35:01:(2) set sysroot /opt/mpss/3.7/sysroots/k1om-mpss-linux/
2017-02-28 14:35:01:(3) set sysroot /opt/mpss/3.7/sysroots/k1om-mpss-linux/
2017-02-28 14:35:01:(4) file /micNfs/gdb-fault-injection/injector/bin/hotspot/hotspot_check
2017-02-28 14:35:01:(5) set remote exec-file /micNfs/gdb-fault-injection/injector/bin/hotspot/hotspot_check
2017-02-28 14:35:01:(6) set args 1024 1024 1000 64 /micNfs/gdb-fault-injection/injector/data/hotspot/temp_1024 /micNfs/gdb-fault-injection/injector/data/hotspot/power_1024 /micNfs/gdb-fault-injection/injector/bin/hotspot/gold_1024_1000iter_64th
2017-02-28 14:35:01:initSignal:12
2017-02-28 14:35:01:endSignal:15
2017-02-28 14:35:01:seqSignal:15
2017-02-28 14:35:14:Backtrace BEGIN:
2017-02-28 14:35:14:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:14:221	    fprintf(stderr, "\t<no. of threads>   - number of threads\n");
222	    fprintf(stderr, "\t<temp_file>  - name of the file containing the initial temperature values of each cell\n");
223	    fprintf(stderr, "\t<power_file> - name of the file containing the dissipated power values of each cell\n");
224	    fprintf(stderr, "\t<output_file> - name of the output file\n");
225	    exit(1);
226	}
227	
228	int main(int argc, char **argv)
229	{
230	    int grid_rows, grid_cols, sim_time, i;

2017-02-28 14:35:14:Backtrace END
2017-02-28 14:35:15:Backtrace BEGIN:
2017-02-28 14:35:15:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:15:231	    FLOAT *temp, *power, *result, *final_result, *gold;
232	    char *tfile, *pfile, *ofile;
233	
234	    /* check validity of inputs	*/
235	    if (argc != 8)
236	        usage(argc, argv);
237	    if ((grid_rows = atoi(argv[1])) <= 0 ||
238	            (grid_cols = atoi(argv[2])) <= 0 ||
239	            (sim_time = atoi(argv[3])) <= 0 ||
240	            (num_omp_threads = atoi(argv[4])) <= 0

2017-02-28 14:35:15:Backtrace END
2017-02-28 14:35:16:Backtrace BEGIN:
2017-02-28 14:35:16:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:16:241	       )
242	        usage(argc, argv);
243	
244	    /* allocate memory for the temperature and power arrays	*/
245	    temp = (FLOAT *) calloc (grid_rows * grid_cols, sizeof(FLOAT));
246	    power = (FLOAT *) calloc (grid_rows * grid_cols, sizeof(FLOAT));
247	    result = (FLOAT *) calloc (grid_rows * grid_cols, sizeof(FLOAT));
248	    gold = (FLOAT *) calloc (grid_rows * grid_cols, sizeof(FLOAT));
249	    if(!temp || !power)
250	        fatal("unable to allocate memory");

2017-02-28 14:35:16:Backtrace END
2017-02-28 14:35:17:Backtrace BEGIN:
2017-02-28 14:35:17:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:17:251	
252	#ifdef LOGS
253	    char test_info[100];
254	    snprintf(test_info, 100, "simIter:%d gridSize:%dx%d",sim_time, grid_rows, grid_cols);
255	    start_log_file((char *)"openMPHotspot", test_info);
256	    set_max_errors_iter(MAX_ERR_ITER_LOG);
257	    set_iter_interval_print(10);
258	#endif /* LOGS */
259	
260	    /* read initial temperatures and input power	*/

2017-02-28 14:35:17:Backtrace END
2017-02-28 14:35:19:Backtrace BEGIN:
2017-02-28 14:35:19:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:19:261	    tfile = argv[5];
262	    pfile = argv[6];
263	    ofile = argv[7];
264	
265	    read_input(temp, grid_rows, grid_cols, tfile);
266	    read_input(power, grid_rows, grid_cols, pfile);
267	    read_input(gold, grid_rows, grid_cols, ofile);
268	
269	#ifdef ERR_INJ
270	    printf("injecting error, changing input!\n");

2017-02-28 14:35:19:Backtrace END
2017-02-28 14:35:20:Backtrace BEGIN:
2017-02-28 14:35:20:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:20:271	    temp[0] =  temp[0]*2;
272	    power[0] = power[0]*5;
273	#endif
274	
275	    printf("Start computing the transient temperature\n");
276	
277	    compute_tran_temp(result,sim_time, temp, power, grid_rows, grid_cols);
278	
279	    printf("Ending simulation\n");
280	

2017-02-28 14:35:20:Backtrace END
2017-02-28 14:35:21:Backtrace BEGIN:
2017-02-28 14:35:21:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:21:281	    final_result = (1&sim_time) ? result : temp;
282	    int errors = 0;
283	    #pragma omp parallel for reduction(+:errors)
284	    for (i=0; i < grid_rows; i++) {
285	        int j;
286	        for (j=0; j < grid_cols; j++) {
287	            if ((fabs((final_result[i*grid_cols+j] - gold[i*grid_cols+j]) / final_result[i*grid_cols+j]) > 0.0000000001) || (fabs((final_result[i*grid_cols+j] - gold[i*grid_cols+j]) / gold[i*grid_cols+j]) > 0.0000000001)) {
288	            //if(final_result[i*grid_cols+j] != gold[i*grid_cols+j] ) {
289	                errors++;
290	            }

2017-02-28 14:35:21:Backtrace END
2017-02-28 14:35:22:Backtrace BEGIN:
2017-02-28 14:35:22:#0  0x00007ffff78a981e in ?? ()
#1  0x0000000000000540 in ?? ()
#2  0x00007ffff5dd51c0 in ?? ()
#3  0x00007ffff5ea1600 in ?? ()
#4  0x0000000000000002 in ?? ()
#5  0x00007fff00000002 in ?? ()
#6  0x00007fff00000000 in ?? ()
#7  0x0000000000000001 in ?? ()
#8  0x0000000000000001 in ?? ()
#9  0x0000000000000004 in ?? ()
#10 0x0000000000000001 in ?? ()
#11 0x0000000000000001 in ?? ()
#12 0x00007fffffffe360 in ?? ()
#13 0x0000000000000000 in ?? ()

2017-02-28 14:35:22:291	        }
292	    }
293	
294	    if (errors!=0)
295	    {
296	        printf("kernel errors: %d\n", errors);
297	#ifdef LOGS
298	        int err_loged=0;
299	        for (i=0; i < grid_rows && err_loged < MAX_ERR_ITER_LOG && err_loged < errors; i++) {
300	            int j;

2017-02-28 14:35:22:Backtrace END
2017-02-28 14:35:33:event type: exit
2017-02-28 14:35:33:exit code: 0
